package com.services.common.enums;

import lombok.Getter;

public enum ErrorCode {

    BAD_REQUEST("BAD_REQUEST", ErrorType.BAD_REQUEST),
    BAD_CONTENT("BAD_CONTENT", ErrorType.BAD_REQUEST),
    INVALID("INVALID", ErrorType.BAD_REQUEST),
    INVALID_PARAMETER("INVALID_PARAMETER", ErrorType.BAD_REQUEST),
    UNKNOWN_API("UNKNOWN_API", ErrorType.BAD_REQUEST),
    UNAUTHORIZED("UNAUTHORIZED", ErrorType.UNAUTHORIZED),
    AUTH_ERROR("AUTH_ERROR", ErrorType.UNAUTHORIZED),
    REQUIRED("REQUIRED", ErrorType.UNAUTHORIZED),
    NOT_AUTHENTICATED("NOT_AUTHENTICATED", ErrorType.UNAUTHORIZED),
    PAYMENT_REQUIRED("PAYMENT_REQUIRED", ErrorType.PAYMENT_REQUIRED),
    FORBIDDEN("FORBIDDEN", ErrorType.FORBIDDEN),
    ACCOUNT_DELETED("ACCOUNT_DELETED", ErrorType.FORBIDDEN),
    ACCOUNT_DISABLED("ACCOUNT_DISABLED", ErrorType.FORBIDDEN),
    DAILY_LIMIT_EXCEEDED("DAILY_LIMIT_EXCEEDED", ErrorType.FORBIDDEN),
    NOT_FOUND("NOT_FOUND", ErrorType.NOT_FOUND),
    METHOD_NOT_ALLOWED("METHOD_NOT_ALLOWED", ErrorType.METHOD_NOT_ALLOWED),
    BAD_ACTION("BAD_ACTION", ErrorType.METHOD_NOT_ALLOWED),
    NOT_ACCEPTABLE("NOT_ACCEPTABLE", ErrorType.NOT_ACCEPTABLE),
    PROXY_AUTHENTICATION_REQUIRED("PROXY_AUTHENTICATION_REQUIRED", ErrorType.PROXY_AUTHENTICATION_REQUIRED),
    REQUEST_TIMEOUT("REQUEST_TIMEOUT", ErrorType.REQUEST_TIMEOUT),
    RESOURCE_EXISTS("RESOURCE_EXISTS", ErrorType.CONFLICT),
    CONFLICT("CONFLICT", ErrorType.CONFLICT),
    DUPLICATE("DUPLICATE", ErrorType.CONFLICT),
    GONE("GONE", ErrorType.GONE),
    LENGTH_REQUIRED("LENGTH_REQUIRED", ErrorType.LENGTH_REQUIRED),
    PRECONDITION_FAILED("PRECONDITION_FAILED", ErrorType.PRECONDITION_FAILED),
    PAYLOAD_TOO_LARGE("PAYLOAD_TOO_LARGE", ErrorType.PAYLOAD_TOO_LARGE),
    URI_TOO_LONG("URI_TOO_LONG", ErrorType.URI_TOO_LONG),
    UNSUPPORTED_MEDIA_TYPE("UNSUPPORTED_MEDIA_TYPE", ErrorType.UNSUPPORTED_MEDIA_TYPE),
    REQUESTED_RANGE_NOT_SATISFIABLE("REQUESTED_RANGE_NOT_SATISFIABLE", ErrorType.REQUESTED_RANGE_NOT_SATISFIABLE),
    EXPECTATION_FAILED("EXPECTATION_FAILED", ErrorType.EXPECTATION_FAILED),
    UNPROCESSABLE_ENTITY("UNPROCESSABLE_ENTITY", ErrorType.UNPROCESSABLE_ENTITY),
    LOCKED("LOCKED", ErrorType.LOCKED),
    FAILED_DEPENDENCY("FAILED_DEPENDENCY", ErrorType.FAILED_DEPENDENCY),
    UPGRADE_REQUIRED("UPGRADE_REQUIRED", ErrorType.UPGRADE_REQUIRED),
    PRECONDITION_REQUIRED("PRECONDITION_REQUIRED", ErrorType.PRECONDITION_REQUIRED),
    TOO_MANY_REQUESTS("TOO_MANY_REQUESTS", ErrorType.TOO_MANY_REQUESTS),
    REQUEST_HEADER_FIELDS_TOO_LARGE("REQUEST_HEADER_FIELDS_TOO_LARGE", ErrorType.REQUEST_HEADER_FIELDS_TOO_LARGE),
    UNAVAILABLE_FOR_LEGAL_REASONS("UNAVAILABLE_FOR_LEGAL_REASONS", ErrorType.UNAVAILABLE_FOR_LEGAL_REASONS),
    INTERNAL_ERROR("INTERNAL_ERROR", ErrorType.INTERNAL_SERVER_ERROR),
    INTERNAL_SERVER_ERROR("INTERNAL_SERVER_ERROR", ErrorType.INTERNAL_SERVER_ERROR),
    NOT_IMPLEMENTED("NOT_IMPLEMENTED", ErrorType.NOT_IMPLEMENTED),
    UNSUPPORTED_METHOD("UNSUPPORTED_METHOD", ErrorType.NOT_IMPLEMENTED),
    BAD_GATEWAY("BAD_GATEWAY", ErrorType.BAD_GATEWAY),
    SERVICE_UNAVAILABLE("SERVICE_UNAVAILABLE", ErrorType.SERVICE_UNAVAILABLE),
    BACKEND_ERROR("BACKEND_ERROR", ErrorType.SERVICE_UNAVAILABLE),
    GATEWAY_TIMEOUT("GATEWAY_TIMEOUT", ErrorType.GATEWAY_TIMEOUT),
    HTTP_VERSION_NOT_SUPPORTED("HTTP_VERSION_NOT_SUPPORTED", ErrorType.HTTP_VERSION_NOT_SUPPORTED),
    VARIANT_ALSO_NEGOTIATES("VARIANT_ALSO_NEGOTIATES", ErrorType.VARIANT_ALSO_NEGOTIATES),
    INSUFFICIENT_STORAGE("INSUFFICIENT_STORAGE", ErrorType.INSUFFICIENT_STORAGE),
    LOOP_DETECTED("LOOP_DETECTED", ErrorType.LOOP_DETECTED),
    BANDWIDTH_LIMIT_EXCEEDED("BANDWIDTH_LIMIT_EXCEEDED", ErrorType.BANDWIDTH_LIMIT_EXCEEDED),
    NOT_EXTENDED("NOT_EXTENDED", ErrorType.NOT_EXTENDED),
    NETWORK_AUTHENTICATION_REQUIRED("NETWORK_AUTHENTICATION_REQUIRED", ErrorType.NETWORK_AUTHENTICATION_REQUIRED);

    @Getter
    private final String value;

    @Getter
    private final ErrorType errorType;

    ErrorCode(String value, ErrorType errorType) {
        this.value = value;
        this.errorType = errorType;
    }

    public static ErrorCode get(Integer status) {
        return switch (status) {
            case 400 -> ErrorCode.BAD_REQUEST;
            case 401 -> ErrorCode.UNAUTHORIZED;
            case 402 -> ErrorCode.PAYMENT_REQUIRED;
            case 403 -> ErrorCode.FORBIDDEN;
            case 404 -> ErrorCode.NOT_FOUND;
            case 405 -> ErrorCode.METHOD_NOT_ALLOWED;
            case 406 -> ErrorCode.NOT_ACCEPTABLE;
            case 407 -> ErrorCode.PROXY_AUTHENTICATION_REQUIRED;
            case 408 -> ErrorCode.REQUEST_TIMEOUT;
            case 409 -> ErrorCode.CONFLICT;
            case 410 -> ErrorCode.GONE;
            case 411 -> ErrorCode.LENGTH_REQUIRED;
            case 412 -> ErrorCode.PRECONDITION_FAILED;
            case 413 -> ErrorCode.PAYLOAD_TOO_LARGE;
            case 414 -> ErrorCode.URI_TOO_LONG;
            case 415 -> ErrorCode.UNSUPPORTED_MEDIA_TYPE;
            case 416 -> ErrorCode.REQUESTED_RANGE_NOT_SATISFIABLE;
            case 417 -> ErrorCode.EXPECTATION_FAILED;
            case 422 -> ErrorCode.UNPROCESSABLE_ENTITY;
            case 423 -> ErrorCode.LOCKED;
            case 424 -> ErrorCode.FAILED_DEPENDENCY;
            case 426 -> ErrorCode.UPGRADE_REQUIRED;
            case 428 -> ErrorCode.PRECONDITION_REQUIRED;
            case 429 -> ErrorCode.TOO_MANY_REQUESTS;
            case 431 -> ErrorCode.REQUEST_HEADER_FIELDS_TOO_LARGE;
            case 451 -> ErrorCode.UNAVAILABLE_FOR_LEGAL_REASONS;
            case 500 -> ErrorCode.INTERNAL_SERVER_ERROR;
            case 501 -> ErrorCode.NOT_IMPLEMENTED;
            case 502 -> ErrorCode.BAD_GATEWAY;
            case 503 -> ErrorCode.SERVICE_UNAVAILABLE;
            case 504 -> ErrorCode.GATEWAY_TIMEOUT;
            case 505 -> ErrorCode.HTTP_VERSION_NOT_SUPPORTED;
            case 506 -> ErrorCode.VARIANT_ALSO_NEGOTIATES;
            case 507 -> ErrorCode.INSUFFICIENT_STORAGE;
            case 508 -> ErrorCode.LOOP_DETECTED;
            case 509 -> ErrorCode.BANDWIDTH_LIMIT_EXCEEDED;
            case 510 -> ErrorCode.NOT_EXTENDED;
            case 511 -> ErrorCode.NETWORK_AUTHENTICATION_REQUIRED;
            default -> ErrorCode.INTERNAL_SERVER_ERROR;
        };
    }
}
